@model Certification_System.DTOViewModels.CompanyWorkersExamTermDetailsViewModel
@using Certification_System.DTOViewModels

@{
    ViewData["Title"] = "CompanyWorkersExamTermDetails";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Szczegóły tury egzaminu</h1>
<hr />

@if (!string.IsNullOrWhiteSpace(ViewBag.message))
{
    <h2 class="alert alert-info" role="alert">@ViewBag.message</h2>
}

<div>
    <h2>Informacje o turze</h2>

    <div class="row m-0 mt-3 mb-3">
        <a asp-action="DisplayCompanyWorkersExamTermSummary" asp-route-examTermIdentificator="@Model.ExamTermIdentificator" asp-controller="ExamsTerms" class="btn btn-success mt-1 mr-1 xs450px_FloatLeft">Osiągane rezultaty</a>
        <a asp-action="CompanyWorkersExamDetails" asp-controller="Exams" asp-route-examIdentificator="@Model.Exam.ExamIdentificator" class="btn btn-outline-info mt-1 xs450px_FloatRight">Powrót do szczegółów egzaminu</a>
    </div>

    <form>

        <div class="col-md-8 col-xl-6 col-lg-6 col-sm-12 col-xs-10 m-auto p-3 shadow p-3 mb-5 bg-light rounded border border-primary rounded-bottom" style="opacity:0.90">

            <div class="form-group">
                <label asp-for="ExamTermIndexer" class="control-label"></label>
                <input asp-for="ExamTermIndexer" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="DateOfStart" class="control-label"></label>
                <input asp-for="DateOfStart" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="DateOfEnd" class="control-label"></label>
                <input asp-for="DateOfEnd" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="DurationDays" class="control-label"></label>
                <input asp-for="DurationDays" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="DurationMinutes" class="control-label"></label>
                <input asp-for="DurationMinutes" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="UsersQuantity" class="control-label"></label>
                <input asp-for="UsersQuantity" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="UsersLimit" class="control-label"></label>
                <input asp-for="UsersLimit" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="Country" class="control-label"></label>
                <input asp-for="Country" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="City" class="control-label"></label>
                <input asp-for="City" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="PostCode" class="control-label"></label>
                <input asp-for="PostCode" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="Address" class="control-label"></label>
                <input asp-for="Address" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="NumberOfApartment" class="control-label"></label>
                <input asp-for="NumberOfApartment" class="form-control col-12" readonly />
            </div>

        </div>
    </form>
</div>

<h2 class="mt-4 mb-4">Informacje dotyczące egzaminu</h2>

@{List<DisplayExamWithoutCourseViewModel> examList = new List<DisplayExamWithoutCourseViewModel>();
    examList.Add(Model.Exam);}

@await Component.InvokeAsync("DisplayExamWithoutCourseDataTable", new { examViewModel = examList, tableIdentificator = "listExams" })

<h2 class="mt-4 mb-4">Informacje dotyczące kursu</h2>

<div class="mt-3 mb-3">
    <a asp-action="CompanyWorkerCourseDetails" asp-route-courseIdentificator="@Model.Course.CourseIdentificator" asp-controller="Courses" class="btn btn-info mt-1">Szczegóły</a>
</div>

@{List<DisplayCourseViewModel> courseList = new List<DisplayCourseViewModel>();
    courseList.Add(Model.Course);}

@await Component.InvokeAsync("DisplayCourseDataTable", new { courseViewModel = courseList, tableIdentificator = "listCourses" })

<h2 class="mt-4 mb-4">Egzaminatorzy</h2>

@if (Model.Examiners.Count != 0)
{
    @await Component.InvokeAsync("DisplayCrucialDataWithContactUserDataTable", new { userViewModel = Model.Examiners, tableIdentificator = "listExaminers" })
}
else
{
    <div class="mt-4 mb-4 alert alert-warning">Brak egzaminatorów przypisanych do egzaminu</div>
}

<h2 class="mt-4 mb-4">Pracownicy przedsiębiorstwa zapisani na turę egzaminu</h2>

@if (Model.Exam.ExamDividedToTerms)
{
    <div class="mt-3 mb-3">
        @if ((Model.DateOfStart > DateTime.Now))
        {
            <a asp-action="AssignCompanyWorkersToExamTerm" asp-route-examTermIdentificator="@Model.ExamTermIdentificator" asp-controller="ExamsTerms" class="btn btn-primary mt-1 mr-1">Zapisz pracowników</a>
            @if (Model.EnrolledCompanyWorkers.Count != 0)
            {
                <a asp-action="RemoveCompanyWorkersFromExamTerm" asp-route-examTermIdentificator="@Model.ExamTermIdentificator" asp-controller="ExamsTerms" class="btn btn-danger mt-1">Usuń zapisanych pracowników</a>
            }
        }
    </div>
}

@if (Model.EnrolledCompanyWorkers.Count != 0)
{
    @await Component.InvokeAsync("DisplayCrucialDataUserDataTable", new { userViewModel = Model.EnrolledCompanyWorkers, tableIdentificator = "listUsers", operationSet = 2 })
}
else
{
    <div class="mt-4 mb-4 alert alert-warning">Brak zapisanych użytkowników</div>
}

@if (Model.ExamResults.Count() != 0)
{
    <h2 class="mt-4 mb-4">Wyniki pracowników</h2>

    @await Component.InvokeAsync("DisplayExamResultToUserDataTable", new { examResultViewModel = Model.ExamResults, tableIdentificator = "listExamsWithExamsResults", operationSet = 4 })
}

@section Scripts {
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listExams");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listCourses");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listExaminers");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listUsers");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listExamsWithExamsResults");}
}
