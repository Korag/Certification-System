@model Certification_System.DTOViewModels.WorkerExamTermDetailsViewModel
@using Certification_System.DTOViewModels

@{
    ViewData["Title"] = "WorkerExamTermDetails";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Szczegóły tury egzaminu</h1>
<hr />

<div>
    <h2>Informacje o turze</h2>

    <div class="row m-0 mt-3 mb-3">
        @if (Model.CanUserAssignToExam)
        {
            <a asp-action="AssignUserToExamHub" asp-route-examIdentificator="@Model.Exam.ExamIdentificator" asp-route-examTermIdentificator="@Model.ExamTermIdentificator" asp-controller="Exams" class="btn btn-outline-info mt-1 xs450px_FloatLeft">Zapisz się</a>
        }
        else if (Model.CanUserResignFromExam)
        {
            <a asp-action="ResignFromExamTerm" asp-route-examTermIdentificator="@Model.ExamTermIdentificator" asp-controller="ExamsTerms" class="btn btn-outline-info mt-1 xs450px_FloatLeft">Zrezygnuj</a>

        }

        <a asp-action="WorkerExamDetails" asp-controller="Exams" asp-route-examIdentificator="@Model.Exam.ExamIdentificator" class="btn btn-outline-info mt-1 xs450px_FloatRight">Powrót do szczegółów egzaminu</a>
    </div>

    <form>

        <div class="col-md-8 col-xl-6 col-lg-6 col-sm-12 col-xs-10 m-auto p-3 shadow p-3 mb-5 bg-light rounded border border-primary rounded-bottom" style="opacity:0.90">

            <div class="form-group">
                <label asp-for="ExamTermIndexer" class="control-label"></label>
                <input asp-for="ExamTermIndexer" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="DateOfStart" class="control-label"></label>
                <input asp-for="DateOfStart" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="DateOfEnd" class="control-label"></label>
                <input asp-for="DateOfEnd" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="DurationDays" class="control-label"></label>
                <input asp-for="DurationDays" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="DurationMinutes" class="control-label"></label>
                <input asp-for="DurationMinutes" class="form-control col-12" readonly />
            </div>


            <div class="form-group">
                <label asp-for="UsersQuantity" class="control-label"></label>
                <input asp-for="UsersQuantity" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="UsersLimit" class="control-label"></label>
                <input asp-for="UsersLimit" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="Country" class="control-label"></label>
                <input asp-for="Country" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="City" class="control-label"></label>
                <input asp-for="City" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="PostCode" class="control-label"></label>
                <input asp-for="PostCode" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="Address" class="control-label"></label>
                <input asp-for="Address" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="NumberOfApartment" class="control-label"></label>
                <input asp-for="NumberOfApartment" class="form-control col-12" readonly />
            </div>

        </div>
    </form>
</div>

<h2 class="mt-4 mb-4">Informacje dotyczące egzaminu</h2>

@{List<DisplayExamWithoutCourseViewModel> examList = new List<DisplayExamWithoutCourseViewModel>();
    examList.Add(Model.Exam);}

@await Component.InvokeAsync("DisplayExamWithoutCourseDataTable", new { examViewModel = examList, tableIdentificator = "listExams", operationSet = 3 })

<h2 class="mt-4 mb-4">Informacje dotyczące kursu</h2>

@{List<DisplayCourseViewModel> courseList = new List<DisplayCourseViewModel>();
    courseList.Add(Model.Course);}

@await Component.InvokeAsync("DisplayCourseDataTable", new { courseViewModel = courseList, tableIdentificator = "listCourses", operationSet = 3 })

@if (Model.ExamResult != null)
{
    <h2 class="mt-4 mb-4">Mój wynik</h2>

    List<DisplayExamResultToUserViewModel> examResultList = new List<DisplayExamResultToUserViewModel>();
    examResultList.Add(Model.ExamResult);

    @await Component.InvokeAsync("DisplayExamResultToUserDataTable", new { examResultViewModel = examResultList, tableIdentificator = "listExamsWithExamsResults", operationSet = 2 })
}

@section Scripts {
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listExams");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listCourses");}
}

