@model Certification_System.DTOViewModels.GivenCertificateDetailsViewModel
@using Certification_System.DTOViewModels

@{
    ViewData["Title"] = "GivenCertificateDetails";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Szczegóły nadanego certyfikatu</h1>
<hr />

<div>

    <h2>Informacje o użytkowniku</h2>

    <div class="row m-0 mt-3 mb-3">
        <a asp-action="EditUser" asp-route-userIdentificator="@Model.User.UserIdentificator" asp-controller="Users" class="btn btn-warning mt-1 md650px_FloatLeft">Edytuj</a>
        <a asp-action="UserDetails" asp-route-userIdentificator="@Model.User.UserIdentificator" asp-controller="Users" class="btn btn-info mt-1 md650px_FloatLeft">Szczegóły</a>
        <a asp-action="DisplayAllGivenCertificates" asp-controller="GivenCertificates" class="btn btn-outline-info mt-1 md650px_FloatRight">Powrót do listy nadanych certyfikatów</a>
    </div>

    <form>

        <div class="col-md-8 col-xl-6 col-lg-6 col-sm-12 col-xs-10 m-auto p-3 shadow p-3 mb-5 bg-light rounded border border-primary rounded-bottom" style="opacity:0.90">

            <div class="form-group">
                <label asp-for="User.Email" class="control-label"></label>
                <input asp-for="User.Email" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.FirstName" class="control-label"></label>
                <input asp-for="User.FirstName" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.LastName" class="control-label"></label>
                <input asp-for="User.LastName" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.PhoneNumber" class="control-label"></label>
                <input asp-for="User.PhoneNumber" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.Country" class="control-label"></label>
                <input asp-for="User.Country" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.City" class="control-label"></label>
                <input asp-for="User.City" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.PostCode" class="control-label"></label>
                <input asp-for="User.PostCode" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.Address" class="control-label"></label>
                <input asp-for="User.Address" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.NumberOfApartment" class="control-label"></label>
                <input asp-for="User.NumberOfApartment" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.DateOfBirth" class="control-label"></label>
                <input asp-for="User.DateOfBirth" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.Roles" class="control-label"></label>
                <div class="row mb-2 ml-0 mr-0">
                    <div>
                        @foreach (var role in Model.User.Roles)
                        {
                            <label class="btn btn-secondary align-content-center">
                                <span>@role</span>
                            </label>
                        }
                    </div>
                </div>
            </div>

        </div>
    </form>

</div>

<h2 class="mt-4 mb-4">Przedsiębiorstwa powiązane z użytkownikiem</h2>

@if (Model.Companies.Count != 0)
{
    @await Component.InvokeAsync("DisplayCompanyWithUserRoleDataTable", new { companyViewModel = Model.Companies, userViewModel = Model.User, tableIdentificator = "listCompanies", operationSet = 1 })
}
else
{
    <div class="mt-4 mb-4 alert alert-warning">Użytkownik nie jest zrzeszony z żadnym przedsiębiorstwem</div>
}

<h2 class="mt-4 mb-4">Szczegóły nadanego certyfikatu</h2>

<div class="row m-0 mt-3 mb-3">
    <a asp-action="EditGivenCertificate" asp-route-givenCertificateIdentificator="@Model.GivenCertificate.GivenCertificateIdentificator" asp-controller="GivenCertificates" class="btn btn-warning mt-1 mr-1">Edytuj certyfikat</a>
    <a asp-action="CertificateDetails" asp-route-certificateIdentificator="@Model.GivenCertificate.Certificate.CertificateIdentificator" asp-controller="Certificates" class="btn btn-info mt-1 mr-1">Szczegóły certyfikatu</a>
    <a asp-action="GivenCertificateDetails" asp-route-givenCertificateIdentificator="@Model.GivenCertificate.GivenCertificateIdentificator" asp-controller="GivenCertificates" class="btn btn-secondary mt-1 mr-1">Szczegóły przyznanego certyfikatu</a>
</div>

@{List<DisplayGivenCertificateToUserWithoutCourseExtendedViewModel> givenCertificateList = new List<DisplayGivenCertificateToUserWithoutCourseExtendedViewModel>();
    givenCertificateList.Add(Model.GivenCertificate);}

@await Component.InvokeAsync("DisplayGivenCertificateWithoutUserExtDataTable", new { givenCertificateViewModel = givenCertificateList, tableIdentificator = "listGivenCertificate" })

<h2 class="mt-4 mb-4">Dane kursu</h2>

@{List<DisplayCourseViewModel> courseList = new List<DisplayCourseViewModel>();
    courseList.Add(Model.Course);}

@await Component.InvokeAsync("DisplayCourseDataTable", new { courseViewModel = courseList, tableIdentificator = "listCourses", operationSet = 2 })

<h2 class="mt-4 mb-4">Spotkania w ramach kursu</h2>

@if (Model.Meetings.Count != 0)
{
    @await Component.InvokeAsync("DisplayMeetingWithoutCourseDataTable", new { meetingViewModel = Model.Meetings, tableIdentificator = "listMeetings", operationSet = 1 })
}
else
{
    <div class="mt-4 mb-4 alert alert-warning">Kurs nie posiada zdefiniowanych spotkań</div>
}

<h2 class="mt-4 mb-4">Instruktorzy przeprowadzający kurs</h2>

@if (Model.Instructors.Count != 0)
{
    @await Component.InvokeAsync("DisplayCrucialDataWithContactUserDataTable", new { userViewModel = Model.User, tableIdentificator = "listInstructors", operationSet = 1 })
}
else
{
    <div class="mt-4 mb-4 alert alert-warning">Brak instruktorów przypisanych do spotkania</div>
}

@section Scripts{
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listGivenCertificate");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listCompanies");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listCourses");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listMeetings");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listInstructors");}
}
