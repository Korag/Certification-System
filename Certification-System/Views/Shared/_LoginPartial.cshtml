@using Certification_System.Entities
@using Microsoft.AspNetCore.Identity
@inject SignInManager<CertificationPlatformUser> SignInManager
@inject UserManager<CertificationPlatformUser> UserManager

<ul class="navbar-nav navbar-right">
    @if (SignInManager.IsSignedIn(User))
    {
        <li class="nav-item mr-2 font-weight-bold">
            <a asp-controller="Users" asp-action="AccountDetails" title="Manage" class="btn btn-outline-primary font-weight-bold">@User.Identity.Name</a>
        </li>
        <li class="nav-item font-weight-bold">
            <form method="post" class="form-inline" asp-controller="Account" asp-action="Logout">
                <button type="button" data-toggle="modal" data-target="#modalLogout" class="btn btn-outline-danger">Wyloguj</button>
                @await Component.InvokeAsync("Modal", new { title = "Wylogowanie z systemu", body = "Czy na pewno chcesz się wylogować ?", formSubmit = true, dataTarget = "modalLogout", buttonText = "Wyloguj", buttonClass = "btn-danger" })
            </form>
        </li>
    }
    else
    {
        <li class="nav-item ml-2 font-weight-bold">
            <a asp-controller="Account" asp-action="Register" class="nav-link text-muted">Register</a>
        </li>
        <li class="nav-item font-weight-bold">
            <a asp-controller="Account" asp-action="Login" class="nav-link text-muted">Zaloguj</a>
        </li>
    }
</ul>
