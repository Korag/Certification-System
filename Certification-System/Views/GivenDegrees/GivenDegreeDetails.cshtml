@model Certification_System.DTOViewModels.GivenDegreeDetailsViewModel
@using Certification_System.DTOViewModels

@{
    ViewData["Title"] = "GivenDegreeDetails";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Szczegóły stopnia zawodowego</h1>
<hr />

<div>

    <h2>Informacje o użytkowniku</h2>

    <div class="row m-0 mt-3 mb-3">
        <a asp-action="EditUser" asp-route-userIdentificator="@Model.User.UserIdentificator" asp-controller="Users" class="btn btn-warning mt-1 md650px_FloatLeft">Edytuj</a>
        <a asp-action="UserDetails" asp-route-userIdentificator="@Model.User.UserIdentificator" asp-controller="Users" class="btn btn-info mt-1 md650px_FloatLeft">Szczegóły</a>
        <a asp-action="DisplayAllGivenDegrees" asp-controller="GivenDegrees" class="btn btn-outline-info mt-1 md650px_FloatRight">Powrót do listy nadanych stopni zawodowych</a>
    </div>

    <form>

        <div class="col-md-8 col-xl-6 col-lg-6 col-sm-12 col-xs-10 m-auto p-3 shadow p-3 mb-5 bg-light rounded border border-primary rounded-bottom" style="opacity:0.90">

            <div class="form-group">
                <label asp-for="User.Email" class="control-label"></label>
                <input asp-for="User.Email" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.FirstName" class="control-label"></label>
                <input asp-for="User.FirstName" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.LastName" class="control-label"></label>
                <input asp-for="User.LastName" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.PhoneNumber" class="control-label"></label>
                <input asp-for="User.PhoneNumber" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.Country" class="control-label"></label>
                <input asp-for="User.Country" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.City" class="control-label"></label>
                <input asp-for="User.City" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.PostCode" class="control-label"></label>
                <input asp-for="User.PostCode" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.Address" class="control-label"></label>
                <input asp-for="User.Address" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.NumberOfApartment" class="control-label"></label>
                <input asp-for="User.NumberOfApartment" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.DateOfBirth" class="control-label"></label>
                <input asp-for="User.DateOfBirth" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="User.Roles" class="control-label"></label>
                <div class="row ml-0 mb-2 mr-0">
                    <div>
                        @foreach (var role in Model.User.Roles)
                        {
                            <label class="btn btn-secondary align-content-center">
                                <span>@role</span>
                            </label>
                        }
                    </div>
                </div>
            </div>

        </div>
    </form>

</div>

<h2 class="mt-4 mb-4">Przedsiębiorstwa powiązane z użytkownikiem</h2>

@if (Model.Companies.Count != 0)
{
    @await Component.InvokeAsync("DisplayCompanyWithUserRoleDataTable", new { companyViewModel = Model.Companies, userViewModel = Model.User, tableIdentificator = "listCompanies", operationSet = 1 })
}

else
{
    <div class="mt-4 mb-4 alert alert-warning">Użytkownik nie jest zrzeszony z żadnym przedsiębiorstwem</div>
}

<h2 class="mt-4 mb-4">Szczegóły nadanego stopnia zawodowego</h2>

<div class="row 0 m-0 mt-3 mb-3">
    <a asp-action="EditGivenDegree" asp-route-givenDegreeIdentificator="@Model.GivenDegree.GivenDegreeIdentificator" asp-controller="GivenDegrees" class="btn btn-warning mt-1 mr-1">Edytuj nadany stopień</a>
    <a asp-action="DegreeDetails" asp-route-degreeIdentificator="@Model.GivenDegree.Degree.DegreeIdentificator" asp-controller="Degrees" class="btn btn-info mt-1 mr-1">Szczegóły stopnia zawodowego</a>
    <a asp-action="GivenDegreeDetails" asp-route-givenDegreeIdentificator="@Model.GivenDegree.GivenDegreeIdentificator" asp-controller="GivenDegrees" class="btn btn-secondary mt-1 mr-1">Szczegóły przyznanego stopnia zawodowego</a>
</div>

@{List<DisplayGivenDegreeToUserExtendedViewModel> givenDegreeList = new List<DisplayGivenDegreeToUserExtendedViewModel>();
    givenDegreeList.Add(Model.GivenDegree);}

@await Component.InvokeAsync("DisplayGivenDegreeToUserExtDataTable", new { givenDegreeViewModel = givenDegreeList, tableIdentificator = "listGivenDegree" })

<h2 class="mt-4 mb-4">Certyfikaty wymagane do uzyskania stopnia zawodowego</h2>

@if (Model.RequiredCertificatesWithGivenInstances.Count != 0)
{
    @await Component.InvokeAsync("DisplayGivenCertificateWithoutUserDataTable", new { givenCertificateViewModel = Model.RequiredCertificatesWithGivenInstances, tableIdentificator = "listRequiredCertificates", operationSet = 1 })
}
else
{
    <div class="mt-4 mb-4 alert alert-warning">Do nadania stopnia zawodowego nie jest wymagane posiadanie jakiegokolwiek certyfikatu</div>
}

<h2 class="mt-4 mb-4">Stopnie zawodowe wymagane do uzyskania wymienionego stopnia zawodowego</h2>

@if (Model.RequiredDegreesWithGivenInstances.Count != 0)
{
    @await Component.InvokeAsync("DisplayGivenDegreeToUserDataTable", new { givenCertificateViewModel = Model.RequiredDegreesWithGivenInstances, tableIdentificator = "listRequiredDegrees", operationSet = 2 })
}
else
{
    <div class="mt-4 mb-4 alert alert-warning">Do nadania stopnia zawodowego nie jest wymagane posiadanie jakiegokolwiek stopnia zawodowego</div>
}

@section Scripts{
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listGivenDegree");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listCompanies");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listRequiredCertificates");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listRequiredDegrees");}
}
