@model Certification_System.DTOViewModels.WorkerCourseDetailsViewModel

@{
    ViewData["Title"] = "WorkerCourseDetails";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Szczegóły szkolenia</h1>
<hr />

<h2>Informacje o kursie</h2>

<div class="row m-0 mt-3 mb-3">
    <a asp-action="WorkerCourses" asp-controller="Courses" class="btn btn-outline-info mt-1 xs450px_FloatRight">Powrót do listy kursów</a>
</div>

<div>
    <form asp-action="CourseDetails">

        <div class="col-md-8 col-xl-6 col-lg-6 col-sm-12 col-xs-10 m-auto p-3 shadow p-3 mb-5 bg-light rounded border border-primary rounded-bottom" style="opacity:0.90">

            <div class="form-group">
                <label asp-for="Course.CourseIndexer" class="control-label"></label>
                <input asp-for="Course.CourseIndexer" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="Course.Name" class="control-label"></label>
                <input asp-for="Course.Name" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="Course.Description" class="control-label"></label>
                <textarea asp-for="Course.Description" class="form-control col-12" style="width:100%; min-width:100%;" readonly></textarea>
            </div>

            <div class="form-group">
                <label asp-for="Course.DateOfStart" class="control-label"></label>
                <input asp-for="Course.DateOfStart" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="Course.DateOfEnd" class="control-label"></label>
                <input asp-for="Course.DateOfEnd" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="Course.EnrolledUsersQuantity" class="control-label"></label>
                <input asp-for="Course.EnrolledUsersQuantity" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="Course.EnrolledUsersLimit" class="control-label"></label>
                <input asp-for="Course.EnrolledUsersLimit" class="form-control col-12" readonly />
            </div>

            <div class="form-group">
                <label asp-for="Course.ExamIsRequired" class="control-label"></label>
                <div class="row pl-3">
                    <input type="checkbox" asp-for="Course.ExamIsRequired" class="form-control col-12" data-toggle="toggle" data-on="Tak" data-off="Nie" data-size="sm" disabled />
                </div>
            </div>

            <div class="form-group">
                <label asp-for="Course.CourseEnded" class="control-label"></label>
                <div class="row pl-3">
                    <input type="checkbox" asp-for="Course.CourseEnded" class="form-control col-12" data-toggle="toggle" data-on="Tak" data-off="Nie" data-size="sm" disabled />
                </div>
            </div>

            <div class="form-group">
                <label asp-for="Course.CourseLength" class="control-label"></label>
                <input asp-for="Course.CourseLength" class="form-control col-12" readonly />
            </div>

            <div class="form-group mb-0">
                <label asp-for="Course.Branches" class="control-label"></label>
                <div class="row ml-0 mr-0">
                    <div>
                        @foreach (var branch in Model.Course.Branches)
                        {
                            <label class="btn btn-secondary align-content-center">
                                <span>@branch</span>
                            </label>
                        }
                    </div>
                </div>
            </div>

        </div>
    </form>
</div>

<h2 class="mt-4 mb-4">Zestawienie obecności</h2>

<div class="row form-group" style="padding-left:2vh">
    <label class="control-label col-6" style="text-align:center;">Ilość obecności</label>
    <label class="control-label col-6" style="text-align:center;">Ilość wszystkich zakończonych spotkań</label>
</div>

<div class="row form-group" style="padding-left:2vh">
    <input value="@Model.MeetingsPresence.Where(z=> z.IsUserPresent == true).Count()" class="form-control col-6" style="text-align:center;" readonly />
    <input value="@Model.MeetingsPresence.Where(z=> DateTime.Now > z.DateOfStart).Count()" class="form-control col-6" style="text-align:center;" readonly />
</div>

@if (Model.MeetingsPresence.Count != 0)
{
    @await Component.InvokeAsync("DisplayMeetingPresenceToUserDataTable", new { meetingViewModel = Model.MeetingsPresence, tableIdentificator = "listMeetingsPresence" })
}

<h2 class="mt-4 mb-4">Spotkania w ramach kursu</h2>

@if (Model.Meetings.Count != 0)
{
    @await Component.InvokeAsync("DisplayMeetingWithoutCourseDataTable", new { meetingViewModel = Model.Meetings, tableIdentificator = "listMeetings" })
}
else
{
    <div class="mt-4 mb-4 alert alert-warning">Kurs nie posiada zdefiniowanych spotkań</div>
}

@if (Model.Course.ExamIsRequired)
{
    <h2 class="mt-4 mb-4">Egzaminy w ramach kursu</h2>

    @if (Model.Exams.Count != 0)
    {
        @await Component.InvokeAsync("DisplayExamWithoutCourseDataTable", new { examViewModel = Model.Exams, tableIdentificator = "listExams", operationSet = 3 })
    }
    else
    {
        <div class="mt-4 mb-4 alert alert-warning">Kurs nie posiada zdefiniowanych egzaminów</div>
    }

    <h2 class="mt-4 mb-4">Moje egzaminy</h2>

    @if (Model.UserExamWithExamResults.Count() != 0)
    {
        @await Component.InvokeAsync("DisplayExamResultToUserDataTable", new { examResultViewModel = Model.UserExamWithExamResults, tableIdentificator = "listExamsWithExamsResults", operationSet = 2 })
    }
    else
    {
        <div class="mt-4 mb-4 alert alert-warning">Nie zapisałeś się jeszcze na żaden egzamin</div>
    }

    <h2 class="mt-4 mb-4">Pozostałe egzaminy wymagane do zaliczenia</h2>

    @if (Model.UserNotPassedExams.Count() != 0)
    {
        @await Component.InvokeAsync("DisplayCrucialDataExamDataTable", new { examViewModel = Model.UserNotPassedExams, courseEnded = Model.Course.CourseEnded, tableIdentificator = "listNotPassedExams", operationSet = 1 })
    }
    else
    {
        <div class="mt-4 mb-4 alert alert-success">Zaliczyłeś wszystkie egzaminy!</div>
    }

    <h2 class="mt-4 mb-4">Moje otrzymane certyfikaty</h2>

    @if (Model.GivenCertificates.Count() != 0)
    {
        @await Component.InvokeAsync("DisplayGivenCertificateToUserDataTable", new { givenCertificateViewModel = Model.GivenCertificates, tableIdentificator = "listGivenCertificates" })
    }
    else if (Model.Course.CourseEnded)
    {
        <div class="mt-4 mb-4 alert alert-danger">Nie otrzymałeś certyfikatu</div>
    }
}

@section Scripts {
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listMeetings");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listMeetingsPresence");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listExams");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listExamsWithExamsResults");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listNotPassedExams");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listGivenCertificates");}
}
