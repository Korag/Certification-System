@model Certification_System.DTOViewModels.DisplayCompanyCourseSummaryViewModel
@using Certification_System.DTOViewModels

@{
    ViewData["Title"] = "DisplayCompanyWorkersCourseSummary";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Podsumowanie wyników uczestników kursu</h2>
<hr />

@if (!string.IsNullOrWhiteSpace(ViewBag.message))
{
    <h2 class="alert alert-info" role="alert">@ViewBag.message</h2>
}

<h2>Informacje o kursie</h2>

<div class="row m-0 mt-3 mb-3">
    <a asp-action="CompanyCourseDetails" asp-route-courseIdentificator="@Model.CourseIdentificator" asp-controller="Courses" class="btn btn-outline-info mt-1 xs450px_FloatRight">Powrót do szczegółów kursu</a>
</div>

<div class="col-md-8 col-xl-6 col-lg-6 col-sm-12 col-xs-10 m-auto p-3 shadow p-3 mb-5 bg-light rounded border border-primary rounded-bottom" style="opacity:0.90">

    <input asp-for="CourseIdentificator" class="form-control col-12" hidden readonly />

    <div class="form-group">
        <label asp-for="CourseIndexer" class="control-label"></label>
        <input asp-for="CourseIndexer" class="form-control col-12" readonly />
    </div>

    <div class="form-group">
        <label asp-for="Name" class="control-label"></label>
        <input asp-for="Name" class="form-control col-12" readonly />
    </div>

    <div class="form-group">
        <label asp-for="Description" class="control-label"></label>
        <textarea asp-for="Description" class="form-control col-12" style="width:100%; min-width:100%;" readonly></textarea>
    </div>

    <div class="form-group">
        <label asp-for="DateOfStart" class="control-label"></label>
        <input asp-for="DateOfStart" class="form-control col-12" readonly />
    </div>

    <div class="form-group">
        <label asp-for="DateOfEnd" class="control-label"></label>
        <input asp-for="DateOfEnd" class="form-control col-12" readonly />
    </div>

    <div class="form-group">
        <label asp-for="EnrolledUsersLimit" class="control-label"></label>
        <input asp-for="EnrolledUsersLimit" class="form-control col-12" readonly />
    </div>

    <div class="form-group">
        <label asp-for="EnrolledUsersQuantity" class="control-label"></label>
        <input asp-for="EnrolledUsersQuantity" class="form-control col-12" readonly />
    </div>

    <div class="form-group">
        <label asp-for="ExamIsRequired" class="control-label"></label>
        <div class="row pl-3">
            <input type="checkbox" asp-for="ExamIsRequired" class="form-control col-12" data-toggle="toggle" data-on="Tak" data-off="Nie" data-size="sm" disabled />
        </div>
    </div>

    <div class="form-group">
        <label asp-for="CourseEnded" class="control-label"></label>
        <div class="row pl-3">
            <input type="checkbox" asp-for="CourseEnded" class="form-control col-12" data-toggle="toggle" data-on="Tak" data-off="Nie" data-size="sm" disabled />
        </div>
    </div>

    <div class="form-group">
        <label asp-for="CourseLength" class="control-label"></label>
        <input asp-for="CourseLength" class="form-control col-12" readonly />
    </div>

    <div class="form-group mb-0">
        <label asp-for="Branches" class="control-label"></label>
        <div class="row ml-0 mr-0">
            <div>
                @foreach (var branch in Model.Branches)
                {
                    <label class="btn btn-secondary align-content-center">
                        <span>@branch</span>
                    </label>
                }
            </div>
        </div>
    </div>

</div>

<h2 class="mt-4 mb-4">Pracownicy przedsiębiorstwa biorący udział w kursie</h2>

@if (Model.AllCourseCompanyWorkers.Count != 0)
{
    @await Component.InvokeAsync("DisplayUserWithCourseResultsDataTable", new { userViewModel = Model.AllCourseCompanyWorkers, examViewModel = Model.AllCourseExams, tableIdentificator = "listUsers" })
}
else
{
    <div class="mt-4 mb-4 alert alert-warning">Brak zapisanych użytkowników</div>
}

<h2 class="mt-4 mb-4">Zestawienie brakujących zaliczeń egzaminów pracowników</h2>

@await Component.InvokeAsync("DisplayUserCourseExamPeriodStatusDataTable", new { userViewModel = Model.CompanyWorkersWithExamPeriodStatus, givenCertificateViewModel = Model.DispensedGivenCertificates, examViewModel = Model.LastExamsPeriods, courseEnded = Model.CourseEnded, tableIdentificator = "listUsersExamsPeriodsStatus" })

@if (Model.GivenCertificates.Count() != 0)
{
    <h2 class="mt-4 mb-4">Otrzymane certyfikaty</h2>

    @await Component.InvokeAsync("DisplayGivenCertificateWithoutCourseDataTable", new { givenCertificateViewModel = Model.GivenCertificates, tableIdentificator = "listGivenCertificates", operationSet = 2 })
}
else if (Model.CourseEnded)
{
    <div class="mt-4 mb-4 alert alert-danger">Żaden pracownik nie otrzymał certyfikatu za ten kurs</div>
}

@section Scripts {
    @{await Html.RenderPartialAsync("_DataTableBasicScript", new DataTableInitializationViewModel("listUsers", new int[] { }, 80, true));}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", new DataTableInitializationViewModel("listUsersExamsPeriodsStatus", new int[] { }, 80, true));}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", new DataTableInitializationViewModel("listGivenCertificates", new int[] { }, 80, true));}
}
