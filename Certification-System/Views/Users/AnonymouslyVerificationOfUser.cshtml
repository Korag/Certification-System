@model Certification_System.DTOViewModels.UserDetailsForAnonymousViewModel

@{
    ViewData["Title"] = "AnonymouslyVerificationOfUser";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Weryfikacja posiadanych uprawnień</h1>
<hr />

<div>
    <h2>Informacje o użytkowniku</h2>

    <div class="mt-3 mb-3">
        <a asp-action="VerifyCompetenceManual" asp-controller="CompetenceVerification" class="btn btn-info">Powrót do panelu weryfikacji</a>
    </div>

    <form asp-action="AnonymouslyVerificationOfUser">

        <div class="col-md-8 col-xl-6 col-lg-6 col-sm-12 col-xs-10 m-auto p-3 shadow p-3 mb-5 bg-light rounded border border-primary rounded-bottom" style="opacity:0.90">

            <div class="form-group">
                <label asp-for="FirstName" class="control-label"></label>
                <input asp-for="FirstName" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="LastName" class="control-label"></label>
                <input asp-for="LastName" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="Email" class="control-label"></label>
                <input asp-for="Email" class="form-control col-12" disabled />
            </div>

            <div class="form-group">
                <label asp-for="DateOfBirth" class="control-label"></label>
                <input asp-for="DateOfBirth" class="form-control col-12" disabled />
            </div>

        </div>

    </form>
</div>

<h2 class="mt-4 mb-4">Przedsiębiorstwa powiązane z użytkownikiem</h2>

@if (Model.Companies.Count != 0)
{
    @await Component.InvokeAsync("DisplayCompanyWithUserRoleDataTable", new { companyViewModel = Model.Companies, tableIdentificator = "listCompanies"})
}

else
{
    <div class="mt-4 mb-4 alert alert-warning">Użytkownik nie jest zrzeszony z żadnym przedsiębiorstwem</div>
}

<h2 class="mt-4 mb-4">Certyfikaty użytkownika</h2>

@if (Model.GivenCertificates.Count != 0)
{
    <div class="col-12 table-responsive">
        <table id="listGivenCertificates" class="table table-bordered display" style="width: 100%;" role="grid">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.GivenCertificates.First().GivenCertificateIndexer)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.GivenCertificates.First().ReceiptDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.GivenCertificates.First().ExpirationDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.GivenCertificates.First().Certificate.CertificateIndexer) i @Html.DisplayNameFor(model => model.GivenCertificates.First().Certificate.Name)
                    </th>
                    <th>
                        Certyfikat jest ważny ?
                    </th>
                </tr>
            </thead>
            <tbody class="text-secondary">
                @foreach (var givenCertificate in Model.GivenCertificates)
                {
                    <tr class="alert @if (givenCertificate.ExpirationDate < DateTime.Now) { <text> table-danger </text>} else { <text> table-success </text> }">
                        <td>
                            @Html.DisplayFor(modelItem => givenCertificate.GivenCertificateIndexer)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => givenCertificate.ReceiptDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => givenCertificate.ExpirationDate)
                        </td>
                        <td>
                            @Html.DisplayFor(model => givenCertificate.Certificate.CertificateIndexer) @Html.DisplayFor(model => givenCertificate.Certificate.Name)
                        </td>
                        <td style="text-align:center">
                            @if (givenCertificate.ExpirationDate < DateTime.Now)
                            {
                                <span class="fas fa-times" style="font-size:34px"></span>
                            }
                            else
                            {
                                <span class="fas fa-check-circle" style="font-size:34px"></span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

else
{
    <div class="mt-4 mb-4 alert alert-warning">Użytkownikowi nie przyznano żadnych certyfikatów</div>
}

<h2 class="mt-4 mb-4">Stopnie zawodowe użytkownika</h2>

@if (Model.GivenDegrees.Count != 0)
{
    <div class="col-12 table-responsive">
        <table id="listGivenDegrees" class="table table-striped table-bordered display" style="width: 100%;" role="grid">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.GivenDegrees.First().GivenDegreeIndexer)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.GivenDegrees.First().ReceiptDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.GivenDegrees.First().ExpirationDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.GivenDegrees.First().Degree.DegreeIndexer) i @Html.DisplayNameFor(model => model.GivenDegrees.First().Degree.Name)
                    </th>
                    <th>
                        Stopień zawodowy jest ważny ?
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var givenDegree in Model.GivenDegrees)
                {
                    <tr class="alert @if (givenDegree.ExpirationDate < DateTime.Now) { <text> table-danger </text>} else { <text> table-success </text> }">
                        <td>
                            @Html.DisplayFor(modelItem => givenDegree.GivenDegreeIndexer)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => givenDegree.ReceiptDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => givenDegree.ExpirationDate)
                        </td>
                        <td>
                            @Html.DisplayFor(model => givenDegree.Degree.DegreeIndexer) @Html.DisplayFor(model => givenDegree.Degree.Name)
                        </td>
                        <td style="text-align:center">
                            @if (givenDegree.ExpirationDate < DateTime.Now)
                            {
                                <span class="fas fa-times" style="font-size:34px"></span>
                            }
                            else
                            {
                                <span class="fas fa-check-circle" style="font-size:34px"></span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

else
{
    <div class="mt-4 mb-4 alert alert-warning">Użytkownikowi nie przyznano żadnych stopni zawodowych</div>
}

@section Scripts{
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listGivenCertificates");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listGivenDegrees");}
    @{await Html.RenderPartialAsync("_DataTableBasicScript", "listCompanies");}
}
